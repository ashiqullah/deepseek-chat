{"ast":null,"code":"import { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChatService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl;\n  }\n  sendMessage(request) {\n    return this.http.post(`${this.apiUrl}/api/chat/send`, request);\n  }\n  getChatHistory(conversationId) {\n    return this.http.get(`${this.apiUrl}/api/chat/history/${conversationId}`);\n  }\n  clearChatHistory(conversationId) {\n    return this.http.delete(`${this.apiUrl}/api/chat/history/${conversationId}`);\n  }\n  healthCheck() {\n    return this.http.get(`${this.apiUrl}/api/chat/health`);\n  }\n  static {\n    this.ɵfac = function ChatService_Factory(t) {\n      return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ChatService,\n      factory: ChatService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","ChatService","constructor","http","apiUrl","sendMessage","request","post","getChatHistory","conversationId","get","clearChatHistory","delete","healthCheck","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\LLM\\Docker\\frontend\\src\\app\\chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ChatRequest, ChatResponse, ChatMessage } from './models/chat.models';\r\nimport { environment } from '../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatService {\r\n  private apiUrl = environment.apiUrl;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  sendMessage(request: ChatRequest): Observable<ChatResponse> {\r\n    return this.http.post<ChatResponse>(`${this.apiUrl}/api/chat/send`, request);\r\n  }\r\n\r\n  getChatHistory(conversationId: string): Observable<ChatMessage[]> {\r\n    return this.http.get<ChatMessage[]>(`${this.apiUrl}/api/chat/history/${conversationId}`);\r\n  }\r\n\r\n  clearChatHistory(conversationId: string): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/api/chat/history/${conversationId}`);\r\n  }\r\n\r\n  healthCheck(): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/api/chat/health`);\r\n  }\r\n} "],"mappings":"AAIA,SAASA,WAAW,QAAQ,6BAA6B;;;AAKzD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAGJ,WAAW,CAACI,MAAM;EAEK;EAExCC,WAAWA,CAACC,OAAoB;IAC9B,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAe,GAAG,IAAI,CAACH,MAAM,gBAAgB,EAAEE,OAAO,CAAC;EAC9E;EAEAE,cAAcA,CAACC,cAAsB;IACnC,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAgB,GAAG,IAAI,CAACN,MAAM,qBAAqBK,cAAc,EAAE,CAAC;EAC1F;EAEAE,gBAAgBA,CAACF,cAAsB;IACrC,OAAO,IAAI,CAACN,IAAI,CAACS,MAAM,CAAC,GAAG,IAAI,CAACR,MAAM,qBAAqBK,cAAc,EAAE,CAAC;EAC9E;EAEAI,WAAWA,CAAA;IACT,OAAO,IAAI,CAACV,IAAI,CAACO,GAAG,CAAC,GAAG,IAAI,CAACN,MAAM,kBAAkB,CAAC;EACxD;;;uBAnBWH,WAAW,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXhB,WAAW;MAAAiB,OAAA,EAAXjB,WAAW,CAAAkB,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}