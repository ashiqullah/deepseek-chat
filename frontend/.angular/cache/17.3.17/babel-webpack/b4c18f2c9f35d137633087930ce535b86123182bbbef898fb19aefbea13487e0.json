{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ConfigService {\n  constructor() {\n    this._apiUrl = this.determineApiUrl();\n  }\n  get apiUrl() {\n    return this._apiUrl;\n  }\n  determineApiUrl() {\n    const host = window.location.hostname;\n    const protocol = window.location.protocol;\n    console.log(`Frontend running on: ${protocol}//${host}`);\n    // For local development\n    if (host === 'localhost' || host === '127.0.0.1') {\n      const apiUrl = 'http://localhost:5000';\n      console.log(`Using local API URL: ${apiUrl}`);\n      return apiUrl;\n    }\n    // For Docker/Pi deployment - use same host but port 5000\n    const apiUrl = `${protocol}//${host}:5000`;\n    console.log(`Using production API URL: ${apiUrl}`);\n    return apiUrl;\n  }\n  static {\n    this.ɵfac = function ConfigService_Factory(t) {\n      return new (t || ConfigService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ConfigService,\n      factory: ConfigService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["ConfigService","constructor","_apiUrl","determineApiUrl","apiUrl","host","window","location","hostname","protocol","console","log","factory","ɵfac","providedIn"],"sources":["D:\\LLM\\Docker\\frontend\\src\\app\\config.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConfigService {\r\n  private _apiUrl: string;\r\n\r\n  constructor() {\r\n    this._apiUrl = this.determineApiUrl();\r\n  }\r\n\r\n  get apiUrl(): string {\r\n    return this._apiUrl;\r\n  }\r\n\r\n  private determineApiUrl(): string {\r\n    const host = window.location.hostname;\r\n    const protocol = window.location.protocol;\r\n    \r\n    console.log(`Frontend running on: ${protocol}//${host}`);\r\n    \r\n    // For local development\r\n    if (host === 'localhost' || host === '127.0.0.1') {\r\n      const apiUrl = 'http://localhost:5000';\r\n      console.log(`Using local API URL: ${apiUrl}`);\r\n      return apiUrl;\r\n    }\r\n    \r\n    // For Docker/Pi deployment - use same host but port 5000\r\n    const apiUrl = `${protocol}//${host}:5000`;\r\n    console.log(`Using production API URL: ${apiUrl}`);\r\n    return apiUrl;\r\n  }\r\n} "],"mappings":";AAKA,OAAM,MAAOA,aAAa;EAGxBC,YAAA;IACE,IAAI,CAACC,OAAO,GAAG,IAAI,CAACC,eAAe,EAAE;EACvC;EAEA,IAAIC,MAAMA,CAAA;IACR,OAAO,IAAI,CAACF,OAAO;EACrB;EAEQC,eAAeA,CAAA;IACrB,MAAME,IAAI,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ;IACrC,MAAMC,QAAQ,GAAGH,MAAM,CAACC,QAAQ,CAACE,QAAQ;IAEzCC,OAAO,CAACC,GAAG,CAAC,wBAAwBF,QAAQ,KAAKJ,IAAI,EAAE,CAAC;IAExD;IACA,IAAIA,IAAI,KAAK,WAAW,IAAIA,IAAI,KAAK,WAAW,EAAE;MAChD,MAAMD,MAAM,GAAG,uBAAuB;MACtCM,OAAO,CAACC,GAAG,CAAC,wBAAwBP,MAAM,EAAE,CAAC;MAC7C,OAAOA,MAAM;;IAGf;IACA,MAAMA,MAAM,GAAG,GAAGK,QAAQ,KAAKJ,IAAI,OAAO;IAC1CK,OAAO,CAACC,GAAG,CAAC,6BAA6BP,MAAM,EAAE,CAAC;IAClD,OAAOA,MAAM;EACf;;;uBA5BWJ,aAAa;IAAA;EAAA;;;aAAbA,aAAa;MAAAY,OAAA,EAAbZ,aAAa,CAAAa,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}